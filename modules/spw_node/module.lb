
def init(module):
	module.name = "spw_node"

def prepare(module, options):
	module.depends("loa-hdl:core")

	module.add_option(BooleanOption(
		name="testbench",
		description="Generate testbench",
		default = False))
	return True

def build(env):
	env.copy('hdl')
	env.copy('vendor/rtl/vhdl/spwpkg.vhd', 'hdl/spwpkg.vhd')
	env.copy('vendor/rtl/vhdl/spwlink.vhd', 'hdl/spwlink.vhd')
	env.copy('vendor/rtl/vhdl/spwrecv.vhd', 'hdl/spwrecv.vhd')
	env.copy('vendor/rtl/vhdl/spwram.vhd', 'hdl/spwram.vhd')
	env.copy('vendor/rtl/vhdl/spwstream.vhd', 'hdl/spwstream.vhd')
	env.copy('vendor/rtl/vhdl/syncdff.vhd', 'hdl/syncdff.vhd')
	env.copy('vendor/rtl/vhdl/spwrecvfront_generic.vhd', 'hdl/spwrecvfront_generic.vhd')
	env.copy('vendor/rtl/vhdl/spwxmit.vhd', 'hdl/spwxmit.vhd')
	# env.copy('vendor/rtl/vhdl/spwrecvfront_fast.vhd', 'hdl/spwrecvfront_fast.vhd')
	# env.copy('vendor/rtl/vhdl/spwxmit_fast.vhd', 'hdl/spwxmit_fast.vhd')

	if env["::testbench"] == True:
			env.copy('tb', "tb/spw_node")
			env.copy('../makefile.ghdl.mk', "tb/spw_node")
